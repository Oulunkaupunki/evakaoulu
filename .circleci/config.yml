# SPDX-FileCopyrightText: 2021 City of Oulu
#
# SPDX-License-Identifier: LGPL-2.1-or-later

version: 2.1

orbs:
  aws-cli: circleci/aws-cli@5.2.0
  slack: circleci/slack@4.13.2

aliases:
  - &workspace_root /home/circleci/repo
  - &workspace_apigw /home/circleci/repo/evaka/apigw
  - &workspace_evaka_frontend /home/circleci/repo/evaka/frontend
  - &workspace_service /home/circleci/repo/service

  - &base_image cimg/base:current-22.04
  - &aws_image cimg/aws:2024.03
  - &reuse_image fsfe/reuse:5.0.2 # NOTE: Update bin/add-license-headers.sh to match
  - &openjdk_image cimg/openjdk:21.0
  - &postgres_image cimg/postgres:16.3
  - &s3mock_image adobe/s3mock:4.1.1

  - &default_config
    working_directory: *workspace_root

  - &jvm_config
    <<: *default_config
    environment:
      GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-XX:MaxRAMPercentage=80"'
      JAVA_TOOL_OPTIONS: "-XX:MaxRAMPercentage=80"

executors:
  base_executor:
    <<: *default_config
    docker:
      - image: *base_image
  aws_executor:
    <<: *default_config
    docker:
      - image: *aws_image
  reuse_tool:
    docker:
      - image: *reuse_image
    working_directory: *workspace_root
  service_build_executor:
    <<: *jvm_config
    docker:
      - image: *openjdk_image
      - image: *postgres_image
        environment:
          POSTGRES_USER: evaka_it
          POSTGRES_PASSWORD: evaka_it
          POSTGRES_DB: evaka_it
      - image: *s3mock_image

commands:
  store_repo:
    steps:
      - persist_to_workspace:
          root: .
          paths:
            - .
  restore_repo:
    steps:
      - attach_workspace:
          at: .

  # Caching commands

  store_service_gradle_wrapper:
    steps:
      - save_cache:
          name: Store gradle wrapper
          key: gradle-wrapper-service-v1-{{ checksum "service/gradle/wrapper/gradle-wrapper.properties" }}
          paths:
            - ~/.gradle/wrapper
            - ~/.gradle/notifications
  restore_service_gradle_wrapper:
    steps:
      - restore_cache:
          name: Restore gradle wrapper
          keys:
            - gradle-wrapper-service-v1-{{ checksum "service/gradle/wrapper/gradle-wrapper.properties" }}

  store_service_gradle_dependencies:
    steps:
      - save_cache:
          name: Store gradle dependencies
          key: gradle-dependencies-service-v1-{{ checksum "service/build.gradle.kts" }}-{{ checksum "evaka/service/gradle/libs.versions.toml" }}-{{ checksum "evaka/service/evaka-bom/build.gradle.kts" }}
          paths:
            - ~/.gradle/caches/jars-9
            - ~/.gradle/caches/journal-1
            - ~/.gradle/caches/modules-2
            - ~/.gradle/caches/transforms-3
  restore_service_gradle_dependencies:
    steps:
      - restore_cache:
          name: Restore gradle dependencies
          keys:
            - gradle-dependencies-service-v1-{{ checksum "service/build.gradle.kts" }}-{{ checksum "evaka/service/gradle/libs.versions.toml" }}-{{ checksum "evaka/service/evaka-bom/build.gradle.kts" }}
            - gradle-dependencies-service-v1-{{ checksum "service/build.gradle.kts" }}-{{ checksum "evaka/service/gradle/libs.versions.toml" }}-
            - gradle-dependencies-service-v1-{{ checksum "service/build.gradle.kts" }}-
            - gradle-dependencies-service-v1-

  store_service_gradle_build_cache:
    steps:
      - save_cache:
          name: Store gradle build cache
          key: gradle-build-cache-service-v1-{{ .Branch }}-{{ .Environment.CIRCLE_WORKFLOW_WORKSPACE_ID }}
          paths:
            - ~/.gradle/caches/8.1
            - ~/.gradle/caches/build-cache-1
  restore_service_gradle_build_cache:
    steps:
      - restore_cache:
          name: Restore gradle build cache
          keys:
            - gradle-build-cache-service-v1-{{ .Branch }}-{{ .Environment.CIRCLE_WORKFLOW_WORKSPACE_ID }}
            - gradle-build-cache-service-v1-{{ .Branch }}-
            - gradle-build-cache-service-v1-main-
            - gradle-build-cache-service-v1-

  # Misc commands

  login_docker_hub:
    description: Log in to Docker Hub for authenticated pulls
    steps:
      - run: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

  login_ecr:
    steps:
      - run:
          name: Log into Amazon ECR
          command: aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 463484918991.dkr.ecr.eu-west-1.amazonaws.com

  setup_authenticated_remote_docker:
    description: Setup remote Docker execution environment with Docker Hub authentication
    parameters:
      docker_layer_caching:
        type: boolean
        default: false
    steps:
      - setup_remote_docker:
          docker_layer_caching: << parameters.docker_layer_caching >>
      #- login_docker_hub

  setup_git:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "SHA256:FZM8L6E/zXfE/mo+6GSVoujLpWOzc4FQ58KhHlMqYYo"
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Setup git
          command: |
            git config user.email "97439387+evakaoulu-ci@users.noreply.github.com"
            git config user.name "evakaoulu-ci"


  setup_git_submodule:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "SHA256:dUdZ0XKv1W9g5sh+D6ANtz+1kKaYPuU6O9cDVYSwhE4"
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Setup git
          command: |
            git config --global user.email "97439387+evakaoulu-ci@users.noreply.github.com"
            git config --global user.name "evakaoulu-ci"

  frontend_install:
    steps:
      - restore_cache:
          keys:
            - yarn-cache-frontend-v1-{{ checksum "evaka/frontend/yarn.lock" }}
            - yarn-cache-frontend-v1-
            - yarn-cache-frontend-
      - run:
          working_directory: *workspace_evaka_frontend
          command: yarn install --immutable
          environment:
            PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
      - save_cache:
          key: yarn-cache-frontend-v1-{{ checksum "evaka/frontend/yarn.lock" }}
          paths:
            - evaka/frontend/.yarn/cache
            - /home/circleci/.npm/sentry-cli

  build_docker_image:
    parameters:
      image:
        type: string
      dir:
        type: string
      extra_build_args:
        type: string
        default: ""
    steps:
      - login_ecr
      - run:
          name: Build docker image
          working_directory: << parameters.dir >>
          command: |
            docker buildx build --progress=plain \
              -t 463484918991.dkr.ecr.eu-west-1.amazonaws.com/<< parameters.image >>:${CIRCLE_SHA1} \
              --build-arg "CACHE_BUST=$(date '+%Y-%V')" \
              --build-arg "build=${CIRCLE_BUILD_NUM}" \
              --build-arg "commit=${CIRCLE_SHA1}" \
              << parameters.extra_build_args >> \
              --push \
              .

  slack-notification:
    steps:
      - slack/notify:
          channel: evaka-oulu-maintenance-ext
          event: fail
          template: basic_fail_1

jobs:
  # MISC JOBS

  checkout_repo:
    parameters:
      latest_upstream:
        type: boolean
        default: false
    executor: base_executor
    resource_class: small
    steps:
      - checkout
      - when:
          condition: << parameters.latest_upstream >>
          steps:
            - run: git submodule set-url evaka https://github.com/espoon-voltti/evaka.git
      - run: git submodule sync
      - run: git submodule update --init
      - when:
          condition: << parameters.latest_upstream >>
          steps:
            - run: git submodule update --remote --merge
      - store_repo
      - slack-notification

  sync_evaka_fork:
    executor: base_executor
    steps:
      - checkout
      - setup_git_submodule
      - run: git submodule sync
      - run: git submodule update --init
      - run: cd evaka && git checkout master
      - run: cd evaka && git remote add upstream https://github.com/espoon-voltti/evaka.git
      - run: cd evaka && git remote -v
      - run: cd evaka && git fetch --all
      - run: cd evaka && git pull --rebase upstream master
      - run: cd evaka && git status
      - run: cd evaka && git push -f origin master
      - slack-notification

  rebase_oulu_customization_branch:
    executor: base_executor
    steps:
      - checkout
      - setup_git_submodule
      - run: git submodule sync
      - run: git submodule update --init
      - run: cd evaka && git fetch --all
      - run: cd evaka && git checkout oulu-customization
      - run: cd evaka && git rebase master
      - run: cd evaka && git push -f
      - setup_git
      - run: git status
      - run: |
          if git status | grep -q 'nothing to commit, working tree clean'; then
            circleci-agent step halt
          fi
      - run: git add evaka
      - run: git commit -m "updated core $(date --iso-8601)"
      - run: git push
      - slack-notification

  commit_and_push_branch:
    executor: base_executor
    resource_class: small
    steps:
      - restore_repo
      - setup_git
      - run:
          name: Verify changes
          command: |
            if [ -z "$(git status --porcelain -- evaka)" ]; then
                circleci-agent step halt
            fi
      - run: git checkout -b evaka-update/$(date --iso-8601)
      - run: git add evaka
      - run: git commit -m "Update evaka submodule"
      - run: git push --set-upstream origin evaka-update/$(date --iso-8601)
      - slack-notification

  merge_branch:
    executor: base_executor
    resource_class: small
    steps:
      - restore_repo
      - setup_git
      - run:
          name: Verify commit
          command: |
            if [ "$(git show -s --format='%cn')" != "evakaoulu-ci" ]; then
                circleci-agent step halt
            fi
      - run: git checkout main
      - run: git pull
      - run: git merge --no-ff --no-edit ${CIRCLE_BRANCH}
      - run: git push
      - run: git push --delete origin ${CIRCLE_BRANCH}
      - slack-notification

  check_licenses:
    executor: reuse_tool
    resource_class: small
    steps:
      - restore_repo
      - run:
          name: reuse lint
          # TODO: remove "true" to enforce check
          command: |
            reuse lint || true || {
              echo '';
              echo '=========================================';
              echo 'Please run: ./bin/add-license-headers.sh';
              echo '=========================================';
              exit 1
            }
      - slack-notification

  # BUILD JOBS

  apigw_build_image:
    executor: aws_executor
    resource_class: medium
    steps:
      - restore_repo
      - setup_authenticated_remote_docker:
          docker_layer_caching: true
      - build_docker_image:
          image: evakaoulu/api-gateway
          dir: *workspace_apigw
      - slack-notification

  frontend_build_image:
    executor: aws_executor
    resource_class: medium+
    steps:
      - restore_repo
      - run:
          name: Fetch commercial frontend dependencies
          working_directory: *workspace_evaka_frontend
          command: |
            aws s3 sync s3://evakaoulu-dev-deployment/frontend/vendor/fortawesome/ ./vendor/fortawesome/
      - setup_authenticated_remote_docker:
          docker_layer_caching: true
      - build_docker_image:
          image: evakaoulu/frontend
          dir: *workspace_evaka_frontend
          extra_build_args: --build-arg EVAKA_CUSTOMIZATIONS=oulu --build-arg ICONS=free --build-context customizations=../../frontend/oulu
      - slack-notification

  service_build_image:
    executor: service_build_executor
    resource_class: medium+
    steps:
      - restore_repo
      - restore_service_gradle_wrapper
      - restore_service_gradle_dependencies
      - restore_service_gradle_build_cache
      - run:
          name: gradle build
          working_directory: *workspace_service
          command: |
            ./gradlew --build-cache build
            java -Djarmode=layertools -jar build/libs/evakaoulu-service.jar extract --destination target
      - store_service_gradle_build_cache
      - store_service_gradle_dependencies
      - store_service_gradle_wrapper
      - store_test_results:
          path: /home/circleci/repo/service/build/test-results/
      - store_artifacts:
          path: /home/circleci/repo/service/build/reports/
      - setup_authenticated_remote_docker:
          docker_layer_caching: true
      - aws-cli/install
      - build_docker_image:
          image: evakaoulu/service
          dir: *workspace_service
      - slack-notification

  scheduled_tasks_reporting_build_image:
    executor: aws_executor
    resource_class: medium
    steps:
      - restore_repo
      - setup_authenticated_remote_docker:
          docker_layer_caching: true
      - build_docker_image:
          image: evakaoulu/scheduled-task/reporting
          dir: scheduled-tasks/reporting
      - slack-notification

  scheduled_tasks_logs_build_image:
    executor: aws_executor
    resource_class: medium
    steps:
      - restore_repo
      - setup_authenticated_remote_docker:
          docker_layer_caching: true
      - build_docker_image:
          image: evakaoulu/scheduled-task/logs
          dir: scheduled-tasks/logs
      - slack-notification

  scheduled_tasks_certificate_check_build_image:
    executor: aws_executor
    resource_class: medium
    steps:
      - restore_repo
      - setup_authenticated_remote_docker:
          docker_layer_caching: true
      - build_docker_image:
          image: evakaoulu/scheduled-task/certificate-check
          dir: scheduled-tasks/certificate-check
      - slack-notification

  trigger_deploy:
    executor: base_executor
    resource_class: small
    steps:
      - run:
          name: Trigger deploy
          command: |
            curl --request POST \
              --url https://circleci.com/api/v2/project/github/Oulunkaupunki/evakaoulu-infra/pipeline \
              --user ''$CIRCLE_TOKEN':' \
              --header 'content-type: application/json' \
              --data '{"branch":"main","parameters":{"workflow":"deploy_pipeline","version":"'$CIRCLE_SHA1'"}}'
      - slack-notification

workflows:
  version: 2
  build_test_and_deploy:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - checkout_repo
      - check_licenses:
          context:
            - slack-secrets
          requires:
            - checkout_repo

      - apigw_build_image:
          context:
            - evakaoulu-dev
            - slack-secrets
          requires:
            - checkout_repo

      - frontend_build_image:
          context:
            - evakaoulu-dev
            - slack-secrets
          requires:
            - checkout_repo

      - service_build_image:
          context:
            - evakaoulu-dev
            - slack-secrets
          requires:
            - checkout_repo

      - scheduled_tasks_reporting_build_image:
          context:
            - evakaoulu-dev
            - slack-secrets
          requires:
            - checkout_repo

      - scheduled_tasks_logs_build_image:
          context:
            - evakaoulu-dev
            - slack-secrets
          requires:
            - checkout_repo

      - scheduled_tasks_certificate_check_build_image:
          context:
            - evakaoulu-dev
            - slack-secrets
          requires:
            - checkout_repo


      - trigger_deploy:
          context:
            - evakaoulu-infra
            - slack-secrets
          requires:
            - check_licenses
            - frontend_build_image
            - apigw_build_image
            - service_build_image
            - scheduled_tasks_reporting_build_image
            - scheduled_tasks_logs_build_image
            - scheduled_tasks_certificate_check_build_image
          filters:
            branches:
              only:
                - main

      - merge_branch:
          context:
            - slack-secrets
          requires:
            - check_licenses
            - frontend_build_image
            - apigw_build_image
            - service_build_image
            - scheduled_tasks_reporting_build_image
            - scheduled_tasks_logs_build_image
            - scheduled_tasks_certificate_check_build_image
          filters:
            branches:
              only:
                - /evaka-update\/.*/

  update_upstream:
    # trigger is configured with circleci ui (project settings -> triggers)
    when:
      and:
        - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - equal: ["update upstream", << pipeline.schedule.name >>]
    jobs:
      - sync_evaka_fork:
          context:
            - slack-secrets
      - rebase_oulu_customization_branch:
          context:
            - slack-secrets
          requires:
            - sync_evaka_fork
